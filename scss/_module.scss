// Module
//
// Copyright (c) 2014 Whizark
// @category module

// Whether `x-module` mixin should export ruleset(s) that use class selector
$x-module-exporting: false !default;

// The separator for modifiers
$x-modifier-separator: '-' !default;

// `x-extend` mixin uses `!optional` if true
$x-strict-extend: false !default;

// The module storage to be used for storing module information
$x--modules: ();

@import "variable";
@import "list";

// Returns prefixed value(s) for selector
// @function x-prefixer
// @param    $prefix    {String}      The prefix to add
// @param    $names     {String|List} A modifier name(s)
// @return              {List}        The list of the prefixed $names
@function x-prefixer($prefix, $names) {
    $prefixed: ();

    @each $name in $names {
        $prefixed: append($prefixed, #{$prefix}#{$name});
    }

    @return $prefixed;
}

// Generates and Returns a selector for module element
// @function x-modifier
// @param    $names     {String...} A modifier name
// @return              {List}      The list of selectors
@function x-modifier($names...) {
    @return x-prefixer($x-modifier-separator, $names);
}

// Returns or sets module attributes
// @function x-module--module
// @private
// @param    $name       {String} The module name
// @param    $attributes {Map}    The attributes to be set to the module
// @return               {Map}    The module attributes
@function x-module--module($name, $attributes: null) {
    @if not x-is-null($attributes) and not x-is-map($attributes) {
        @warn 'The attribute(s) of module must be a Map.';
    }

    @if x-is-null($attributes) {
        $attributes: map-get($x--modules, $name)
    } @else {
        $module: (
            $name: $attributes
        );

        $x--modules: map-merge($x--modules, $module) !global;
    }

    @return $attributes;
}

// Returns or sets a module attribute
// @function x-module--attr
// @private
// @param    $name  {String} The module name
// @param    $key   {*}      The key of the attribute
// @param    $value {*}      The value to be set to the key
// @return          {*}      The value of the attribute
@function x-module--attr($name, $key, $value: null) {
    @if not x-module-exists($name) {
        @warn 'The module "#{$name}" doesn\'t exist.';
    }

    @if x-is-null($value) {
        $value: map-get(x-module--module($name), $key);
    } @else {
        $attributes: x-module--module($name);
        $attributes: map-merge($attributes, ($key: $value));
        $modules: x-module--module($name, $attributes);
    }

    @return $value;
}

// Returns whether a module exists
// @function x-module-exists
// @param    $name {String} The module name
// @return         {Bool}   True if the module exists, otherwise false
@function x-module-exists($name) {
    @return map-has-key($x--modules, $name);
}

// Defines module and produces ruleset(s) that use Placeholder selector
// @mixin x-module
// @param $name      {String}  The module name
// @param $exporting {Boolean} Whether export ruleset(s) that use class selector
@mixin x-module($name, $exporting: $x-module-exporting) {
    %#{$name} {
        @at-root {
            @content;
        }
    }

    @if $exporting {
        .#{$name} {
            @at-root {
                @content;
            }
        }
    }
}

// Defines module element with modifier
// @mixin x-modifier
// @param $names     {String...} Modifier name(s)
@mixin x-modifier($names...) {
    @each $name in $names {
        $name: unquote($name);

        #{&}#{x-modifier($name)} {
            @content;
        }
    }
}
// Extends ruleset(s) from a module
// @mixin x-extend
// @param $modules {String|Map...} Module name(s) to extend, or map(s) to extend with module element(s)
//                                 {module-name: ('suffix', ...), ...}
@mixin x-extend($modules...) {
    @at-root {
        @each $module in $modules {
            @if not x-is-map($module) {
                $module: (
                    #{$module}: ()
                )
            }

            @each $name, $suffixes in $module {
                $suffixes: x-list-flatten($suffixes);

                & {
                    @if $x-strict-extend {
                        @extend %#{$name};
                    } @else {
                        @extend %#{$name} !optional;
                    }
                }

                @each $suffix in $suffixes {
                    #{&}#{$suffix} {
                        @if $x-strict-extend {
                            @extend %#{$name}#{$suffix};
                        } @else {
                            @extend %#{$name}#{$suffix} !optional;
                        }
                    }
                }
            }
        }

        @content;
    }
}
