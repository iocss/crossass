// Module
//
// Copyright (c) 2014 Whizark
// @category module

// Whether `x-module` mixin should export ruleset(s) that use class selector
$x-module-exporting: false !default;

// The separator for modifiers
$x-modifier-separator: '-' !default;

// Crossass never use `!optional` with `@extend` if true
$x-strict-extend: false !default;

// The module storage to be used for storing module information
$x--modules: ();

// The context storage to be used for storing the current context
$x--contexts: (
    module: null,
    parent: null,
    modifier: null,
);

@import "variable";
@import "list";
@import "selector";

// Returns prefixed value(s) for selector
// @function x--prefixer
// @private
// @param    $prefix    {String}      The prefix to add
// @param    $names     {String|List} A modifier name(s)
// @return              {List}        The list of the prefixed $names
@function x--prefixer($prefix, $names) {
    $prefixed: ();

    @each $name in $names {
        $prefixed: append($prefixed, #{$prefix}#{$name});
    }

    @return $prefixed;
}

// Generates and Returns module selector(s) from module name(s)
// @function x-module
// @param    $names     {String...} The module name(s),
//                                  or the module name in the current context
//                                     if null or nothing is passed
// @return              {List}      The list of the selector(s)
@function x-module($names...) {
    @if x-is-null($names) or length($names) == 0 {
        $module: x-module--context('module');

        @return $module;
    }

    @return x--prefixer('%', $names);
}

// Generates and Returns suffix(es) from modifier name(s)
// @function x-modifier
// @param    $names     {String...} The modifier name(s),
//                                  or the modifier name in the current context
//                                     if null or nothing is passed
// @return              {List}      The list of the suffix(es)
@function x-modifier($names...) {
    @if x-is-null($names) or length($names) == 0 {
        $modifier: x-module--context('modifier');

        @return $modifier;
    }

    @return x--prefixer($x-modifier-separator, $names);
}

// Returns the module-root selector
// @function x-root
// @return   {String} The selector
@function x-root() {
    $module: x-module--context('module');

    @return '%#{$module}';
}

// Returns the parent modifier's selector
// @function x-parent
// @return   {String} The selector
@function x-parent() {
    @return x-module--context('parent');
}

// Returns the module name in the current context
// @function x-module-name
// @return   {String} The module name
@function x-module-name() {
    @return x-module--context('module');
}

// Returns the parent module name of a module
// @function x-module-parent
// @param    $name {String} The module name having the parent module,
//                          or the module name in the current context is used by the default
// @return         {String} The parent module name
@function x-module-parent($name: null) {
    @if x-is-null($name) {
        $name: x-module-name();
    }

    @return x-module--attr($name, 'parent');
}

// Returns whether a selector is a single class selecotr or placeholder
// @function x--is-modifiable
// @private
// @param    $selector {String} The selector to be test
// @return             {Bool}   True if the selector is the single selector, otherwise false
@function x--is-modifiable($selector) {
    $sliced: str-slice($selector, 2);

    $maybe-not-modifiable: x-selector-has-universal($sliced) or
                           x-selector-has-id($sliced) or
                           x-selector-has-class($sliced) or
                           x-selector-has-attr($sliced) or
                           x-selector-has-combinator($sliced) or
                           x-selector-has-subject($sliced) or
                           x-selector-has-placeholder($sliced);

    @if $maybe-not-modifiable {
        @return false;
    }

    $is-class: str-index($selector, '.') == 1;
    $is-placeholder: str-index($selector, '%') == 1;

    @return $is-class or $is-placeholder;
}

// Returns the default attributes for module
// @function x-module--default-attrs
// @private
// @return   {Map} The default attributes
@function x-module--default-attrs() {
    $defaults: (
        name: null,
        parent: null,
        modifiers: ()
    );

    @return $defaults;
}

// Returns or sets module attributes
// @function x-module--module
// @private
// @param    $name       {String} The module name
// @param    $attributes {Map}    The attributes to be set to the module
// @return               {Map}    The module attributes
@function x-module--module($name, $attributes: null) {
    @if not x-is-null($attributes) and not x-is-map($attributes) {
        @warn 'The attribute(s) of module must be a Map.';
    }

    @if x-is-null($attributes) {
        $attributes: map-get($x--modules, $name)
    } @else {
        $module: (
            $name: $attributes
        );

        $x--modules: map-merge($x--modules, $module) !global;
    }

    @return $attributes;
}

// Returns or sets the context of a context type
// @function x-module--context
// @private
// @param   $type    {*}      The type of the context
// @param   $context {*}      The context to be set as the context type
// @return           {String} The context of the type
@function x-module--context($type, $context: null) {
    @if x-is-null($context) {
        $context: map-get($x--contexts, $type);
    } @else {
        $x--contexts: map-merge($x--contexts, ($type: $context)) !global;
    }

    @return $context;
}

// Returns or sets a module attribute
// @function x-module--attr
// @private
// @param    $name  {String} The module name
// @param    $key   {*}      The key of the attribute
// @param    $value {*}      The value to be set to the key
// @return          {*}      The value of the attribute
@function x-module--attr($name, $key, $value: null) {
    @if not x-module-exists($name) {
        @warn 'The module "#{$name}" doesn\'t exist.';
    }

    @if x-is-null($value) {
        $value: map-get(x-module--module($name), $key);
    } @else {
        $attributes: x-module--module($name);
        $attributes: map-merge($attributes, ($key: $value));
        $modules: x-module--module($name, $attributes);
    }

    @return $value;
}

// Guesses and returns Full-Qualified-Modifier-Name from a selector.
// @function x-module--guess-modifier
// @private
// @param    $selector {String}      The selector to make the guess.
// @return             {String|Null} The Full-Quliafied-Modifier-Name in a Module context,
//                                   otherwise null
@function x-module--guess-modifier($selector) {
    $module-name: x-module--context('module');

    @if x-is-null($module-name) {
        @return null;
    }

    $sliced-selector: str-slice($selector, 2);

    @if str-index($sliced-selector, $module-name) != 1 {
        @return null;
    }

    $modifier: str-slice($sliced-selector, str-length($module-name) + 1);

    @return $modifier;
}

// Registers new modifier for a module
// @function x-module--add-modifier
// @private
// @param    $name     {String} The module name
// @param    $modifier {String} The modifier to be registered to the module
// @return             {String} The modifier
@function x-module--add-modifier($name, $modifier) {
    $modifiers: x-module--attr($name, 'modifiers');

    @if x-list-has($modifiers, $modifier) {
        @return $modifier;
    }

    $modifiers: join($modifiers, $modifier);
    $modifiers: x-module--attr($name, 'modifiers', $modifiers);

    @return $modifier;
}

// Returns parent module attributes
// @function x-module--parent
// @private
// @param    $name       {String} The module name
// @return               {Map}    The parent module attributes
@function x-module--parent($name) {
    $parent-name: x-module--attr($name, 'parent');
    $parent: x-module--module($parent-name);

    @return $parent;
}

// Returns whether a module has the parent module
// @function x-module--has-parent
// @private
// @param    $name {String} The module name
// @return         {Bool}   True if the module has the parent module, otherwise false
@function x-module--has-parent($name) {
    @return not x-is-null(x-module--parent($name));
}

// Registers new module
// @function x-module--register
// @private
// @param    $name       {String} The module name
// @param    $attributes {Map}    The attributes to be set to the module
// @return               {Map}    The module attributes
@function x-module--register($name, $attributes: null) {
    @if x-module-exists($name) {
        @warn 'The module "#{$name}" already exists.';
    }

    $attributes: if(not x-is-null($attributes), $attributes, ());
    $attributes: map-merge(x-module--default-attrs(), $attributes);

    $module: x-module--module($name, $attributes);
    $context: x-module--context('module', $name);

    @return $module;
}

// Returns whether a module exists
// @function x-module-exists
// @param    $name {String} The module name
// @return         {Bool}   True if the module exists, otherwise false
@function x-module-exists($name) {
    @return map-has-key($x--modules, $name);
}

// Inherits declaration(s) from a ruleset
// @mixin x--extend
// @private
// @param $selector {String} The selector having the ruleset
@mixin x--extend($selector) {
    @if $x-strict-extend {
        @extend #{$selector};
    } @else {
        @extend #{$selector} !optional;
    }
}

// Defines a base module and produces ruleset(s) that use Placeholder selector
// @mixin x-module
// @param $name      {String} The module name
// @param $exporting {Bool}   Whether export ruleset(s) that use class selector
@mixin x-module($name, $exporting: $x-module-exporting) {
    $module: x-module--register(
        $name,
        (
            name: $name
        )
    );

    %#{$name} {
        @content;
    }

    @if $exporting {
        @include x-export($name);
    }
}

// Defines a sub module and produces ruleset(s) that use Placeholder selector
// @mixin x-module-extend
// @param $name      {String} The module name
// @param $parent    {String} The parent module name to be extended
// @param $exporting {Bool}   Whether export ruleset(s) that use class selector
@mixin x-module-extend($name, $parent, $exporting: $x-module-exporting) {
    $module: x-module--register(
        $name,
        (
            name: $name,
            parent: $parent
        )
    );
    $parent-module: x-module--parent($parent);
    $parent-modifiers: x-module--attr($parent, 'modifiers');

    %#{$name} {
        @include x--extend('%#{$parent}');

        @at-root {
            @each $parent-modifier in $parent-modifiers {
                #{&}#{$parent-modifier} {
                    @include x--extend('%#{$parent}#{$parent-modifier}');
                }
            }
        }

        @content;
    }

    @if $exporting {
        @include x-export($name);
    }
}

// Imports a module and the descendant rulesets
// @mixin x-import
// @param $name      {String} The module name
@mixin x-import($name) {
    @include x-export($name);
}

// Exports a module and the descendant rulesets as classes
// @mixin x-export
// @param $name      {String} The module name
// @param $namespace {String} The namespace to be prepended to each selector
@mixin x-export($name, $namespace: null) {
    $namespace: if(x-is-null($namespace), '', '.' + $namespace + ' ');
    $modifiers: x-module--attr($name, 'modifiers');

    #{$namespace}.#{$name} {
        @if x-module--has-parent($name) {
            $parent-name: x-module--attr($name, 'parent');
            $parent-modifiers: x-module--attr($parent-name, 'modifiers');
            @include x--extend('%#{$parent-name}');
        }

        @include x--extend('%#{$name}');
    }

    @if x-module--has-parent($name) {
        $parent-name: x-module--attr($name, 'parent');
        $parent-modifiers: x-module--attr($parent-name, 'modifiers');

        @each $parent-modifier in $parent-modifiers {
            #{$namespace}.#{$name}#{$parent-modifier} {
                @include x--extend('%#{$parent-name}#{$parent-modifier}');
            }
        }
    }

    @each $modifier in $modifiers {
        #{$namespace}.#{$name}#{$modifier} {
            @include x--extend('%#{$name}#{$modifier}');
        }
    }
}

// Defines module element with modifier
// @mixin x-modifier
// @param $names     {String...} Modifier name(s)
@mixin x-modifier($names...) {
    $modifier-context: ();

    @at-root {
        @if x--is-modifiable(#{&}) {
            $parent-context: x-module--context('parent', #{&});

            @each $name in $names {
                $name: unquote($name);

                $suffix: x-modifier($name);
                $guessed-modifier: x-module--guess-modifier(#{&}#{$suffix});
                $modifier: x-module--add-modifier(x-module--context('module'), $guessed-modifier);
                $modifier-context: x-module--context('modifier', $modifier);

                #{&}#{$suffix} {
                    @content;
                }
            }
        } @else {
            @warn 'The parent selector "#{&}" should be a single class selector or placeholder.';
        }
    }
}

// Inherits declaration(s) from the parent ruleset
// @mixin x-parent
@mixin x-parent() {
    @include x--extend(x-module--context('parent'));
}

// Inherits ruleset(s) from a module
// @mixin x-extend
// @param $modules {String|Map...} Module name(s) to extend, or map(s) to extend with module element(s)
//                                 {module-name: ('suffix', ...), ...}
@mixin x-extend($modules...) {
    @each $module in $modules {
        @if not x-is-map($module) {
            $module: (
                #{$module}: ()
            )
        }

        @each $name, $suffixes in $module {
            $suffixes: x-list-flatten($suffixes);

            & {
                @if x-is-empty($suffixes) {
                    @include x--extend('#{$name}');
                }

                @each $suffix in $suffixes {
                    @include x--extend('#{$name}#{$suffix}');
                }
            }
        }
    }

    & {
        @content;
    }
}
