// Variable
//
// Copyright (c) 2014 Whizark
// @category variable

@import "string";

// Returns whether a variable is Number
// @function x-is-number
// @param    $variable {*}    The variable to be test
// @return             {Bool} True if the variable is Number, otherwise false
@function x-is-number($variable) {
    @return type-of($variable) == 'number';
}

// Returns whether a variable is String
// @function x-is-string
// @param    $variable {*}    The variable to be test
// @return             {Bool} True if the variable is String, otherwise false
@function x-is-map($variable) {
    @return type-of($variable) == 'string';
}

// Returns whether a variable is Color
// @function x-is-color
// @param    $variable {*}    The variable to be test
// @return             {Bool} True if the variable is Color, otherwise false
@function x-is-color($variable) {
    @return type-of($variable) == 'color';
}

// Returns whether a variable is Bool
// @function x-is-bool
// @param    $variable {*}    The variable to be test
// @return             {Bool} True if the variable is Bool, otherwise false
@function x-is-bool($variable) {
    @return type-of($variable) == 'bool';
}

// Returns whether a variable is List
// @function x-is-list
// @param    $variable {*}    The variable to be test
// @return             {Bool} True if the variable is List, otherwise false
@function x-is-list($variable) {
    @return type-of($variable) == 'list';
}

// Returns whether a variable is Map
// @function x-is-map
// @param    $variable {*}    The variable to be test
// @return             {Bool} True if the variable is Map, otherwise false
@function x-is-map($variable) {
    @return type-of($variable) == 'map';
}

// Returns whether a variable is Null
// @function x-is-null
// @param    $variable {*}    The variable to be test
// @return             {Bool} True if the variable is Null, otherwise false
@function x-is-null($variable) {
    @return $variable == null;
}

// Walks a variable recursively and returns the information
// @function x--walk
// @private
// @param    $variable        {*}      The variable to be walked
// @param    $recursion-level {Number} The level of the recursive call (internally used)
// @return                    {List}   The list of lines that include variable-information
@function x--walk($variable, $recursion-level: 0) {
    $lines: ();
    $indent: x-str-repeat(' ', $recursion-level * 4);

    $type: type-of($variable);
    $line: $indent + '(#{$type}) ';

    @if x-is-map($variable) {
        $line: $line + '(';
        $lines: append($lines, $line);

        @each $key, $value in $variable {
            $line: $indent + '    ' + '#{$key}: ';

            @if x-is-null($value) {
                $line: $line + '(#{type-of($value)})';
                $lines: append($lines, $line);
            } @else {
                $child: x--walk($value, $recursion-level + 1);
                $lines: join($lines, set-nth($child, 1, $line + str-slice(nth($child, 1), 5)));
            }
        }

        $line: $indent + ')';
        $lines: append($lines, $line);
    } @else if x-is-list($variable) {
        $line: $line + '(';
        $lines: append($lines, $line);

        @each $value in $variable {
            $lines: join($lines, x--walk($value, $recursion-level + 1));
        }

        $line: $indent + ')';
        $lines: append($lines, $line);
    } @else if x-is-null($variable) {
        $lines: append($lines, $line);
    } @else {
        $line: $line + '#{$variable}';
        $lines: append($lines, $line);
    }

    @return $lines;
}

// Inspects a variable and returns the information
// @function
// @param    $variable {*}    The variable to be inspected
// @return             {List} The list of lines that include variable-information
@function x-inspect($variable) {
    $lines: x--walk($variable);

    @return $lines;
}
