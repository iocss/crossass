// Crossass
//
// A tiny mixin / function library for modular CSS.
//
// Copyright (c) 2014 Whizark
// @category core

// Whether `x-module` mixin should export ruleset(s) that use class selector
$x-module-exporting: false !default;

// The separator for modifiers
$x-modifier-separator: '-' !default;

// `x-extend` mixin uses `!optional` if true
$x-strict-extend: false !default;

// Returns prefixed value(s) for selector
// @function x-prefixer
// @param    $prefix    {String}      The prefix to add
// @param    $names     {String|List} A modifier name(s)
// @return              {List}        The list of the prefixed $names
@function x-prefixer($prefix, $names) {
    $prefixed: ();

    @each $name in $names {
        $prefixed: append($prefixed, #{$prefix}#{$name});
    }

    @return $prefixed;
}

// Generates and Returns a selector for module element
// @function x-modifier
// @param    $names     {String...} A modifier name
// @return              {List}      The list of selectors
@function x-modifier($names...) {
    @return x-prefixer($x-modifier-separator, $names);
}

// Flattens (split and joins) multiple lists
// @function x-flatten
// @param    $list     {List} List(s) to flatten
// @return             {List} The flattened list
@function x-flatten($list) {
    $flattened: ();

    @each $item in $list {
        @if type_of($item) == 'list' {
            $flattened: join($flattened, x-flatten($item));
        } @else {
            $flattened: join($flattened, $item);
        }
    }

    @return $flattened;
}

// Defines module and produces ruleset(s) that use Placeholder selector
// @mixin x-module
// @param $name      {String}  The module name
// @param $exporting {Boolean} Whether export ruleset(s) that use class selector
@mixin x-module($name, $exporting: $x-module-exporting) {
    %#{$name} {
        @at-root {
            @content;
        }
    }

    @if $exporting {
        .#{$name} {
            @at-root {
                @content;
            }
        }
    }
}

// Defines module element with modifier
// @mixin x-modifier
// @param $names     {String} A modifier name
@mixin x-modifier($name) {
    $name: unquote($name);

    #{&}#{x-modifier($name)} {
        @content;
    }
}
// Extends ruleset(s) from a module
// @mixin x-extend
// @param $modules {String|Map...} Module name(s) to extend, or map(s) to extend with module element(s)
//                                 {module-name: ('suffix', ...), ...}
@mixin x-extend($modules...) {
    @at-root {
        @each $module in $modules {
            @if type_of($module) != 'map' {
                $module: (
                    #{$module}: ()
                )
            }

            @each $name, $suffixes in $module {
                $suffixes: x-flatten($suffixes);

                & {
                    @if $x-strict-extend {
                        @extend %#{$name};
                    } @else {
                        @extend %#{$name} !optional;
                    }
                }

                @each $suffix in $suffixes {
                    #{&}#{$suffix} {
                        @if $x-strict-extend {
                            @extend %#{$name}#{$suffix};
                        } @else {
                            @extend %#{$name}#{$suffix} !optional;
                        }
                    }
                }
            }
        }

        @content;
    }
}
