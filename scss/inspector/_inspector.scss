// Crossass Inspector
//
// Copyright (c) 2014 Whizark
// @category inspector

// Whether output debug information using @debug.
$x-inspector-debug: true !default;

// Whether display debug information on screen.
$x-inspector-display: true !default;

// The position to display debug information.
$x-inspector-display-position: 'bottom' !default;

// Walks a variable recursively and returns the information
// @function x-inspector--walk
// @private
// @param    $variable        {*}      The variable to be walked
// @param    $recursion-level {Number} The level of the recursive call (internally used)
// @return                    {List}   The list of lines that include variable-information
@function x-inspector--walk($variable, $recursion-level: 0) {
    $lines: ();
    $indent-spaces: 4;
    $indent: x-str-repeat(' ', $recursion-level * $indent-spaces);

    $type: type-of($variable);
    $line: $indent + '(#{$type}) ';

    @if type-of($variable) == 'map' {
        $line: $line + '(';
        $lines: append($lines, $line);

        @each $key, $value in $variable {
            $line: $indent + x-str-repeat(' ', $indent-spaces) + '#{$key}: ';

            @if $value == null {
                $line: $line + '(#{type-of($value)})';
                $lines: append($lines, $line);
            } @else {
                $child: x-inspector--walk($value, $recursion-level + 1);
                $lines: join($lines, set-nth($child, 1, $line + str-slice(nth($child, 1), $indent-spaces * ($recursion-level + 1) + 1)));
            }
        }

        $line: $indent + ')';
        $lines: append($lines, $line);
    } @else if type-of($variable) == 'list' {
        $line: $line + '(';
        $lines: append($lines, $line);

        @each $value in $variable {
            $lines: join($lines, x-inspector--walk($value, $recursion-level + 1));
        }

        $line: $indent + ')';
        $lines: append($lines, $line);
    } @else if $variable == null {
        $lines: append($lines, $line);
    } @else {
        $line: $line + '#{$variable}';
        $lines: append($lines, $line);
    }

    @return $lines;
}

// Inspects a variable and returns the information
// @function x-inspect
// @param    $variable {*}    The variable to be inspected
// @return             {List} The list of lines that include variable-information
@function x-inspect($variable) {
    $lines: x-inspector--walk($variable);

    @return $lines;
}

// Styles for the Crossass Inspector Toolbar
// @mixin x-inspector--toolbar
// @private
// @param $content {String} The content to be shown
@mixin x-inspector--toolbar($content: '') {
    content: $content !important;
    display: block !important;
    margin: 0 !important;
    padding: 1em !important;
    border: 0 solid #e5e5e5 !important;
    color: #333 !important;
    background: #f3f3f3 !important;
    font: 13px/normal monospace !important;
    white-space: pre-wrap !important;
}

// Outputs variable-information
// @mixin x-inspect
// @param $variable {*} The variable to be inspected
@mixin x-inspect($variable) {
    $content: '';

    @each $line in x-inspect($variable) {
        @if $x-inspector-debug {
            @debug $line;
        }

        @if $x-inspector-display {
            $content: $content + $line + '\A ';
        }
    }

    @if $x-inspector-display {
        @if $x-inspector-display-position == 'top' {
            html::before {
                @include x-inspector--toolbar($content);
                border-bottom-width: 1px !important;
                box-shadow: 0 4px 4px #f9f9f9 !important;
            }
        }

        @if $x-inspector-display-position == 'bottom' {
            html::after {
                @include x-inspector--toolbar($content);
                border-top-width: 1px !important;
                box-shadow: 0 -4px 4px #f9f9f9 !important;
            }
        }
    }
}
